# -*- coding: utf-8 -*-
"""segmentação_scikit-image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZlAaerJF6cmpHozUq60t3KthS8sUoSX5
"""

!pip install -U scikit-image

# Carregando as bibliotecas 
import numpy as np
from skimage import io, segmentation, color
from matplotlib import pyplot as plt

#!pip install --upgrade Pillow

!pip install Pillow==9.0.0

# Carregando a imagem
#from PIL import Image

#img = Image.open('/content/borboleta.jpg')

from skimage import io

# Carrega a imagem como um numpy array
img = io.imread('/content/borboleta.jpg')

# Realiza a segmentação da imagem utilizando o algoritmo Felzenszwalb
segments = segmentation.felzenszwalb(img, scale=100, sigma=0.5, min_size=50)

# Aplica uma cor aleatória para cada segmento
seg_color = color.label2rgb(segments, img, kind='avg') # kind por ser 'avg' ou 'overlay'

# Exibe a imagem original e a segmentada
fig, ax = plt.subplots(ncols=2, figsize=(50, 15))
ax[0].imshow(img)
ax[0].set_title('Imagem original')
ax[1].imshow(seg_color)
ax[1].set_title('Segmentação de imagem')
plt.show()

"""###segmentação de bordas (Canny)"""



from skimage import io, feature
import numpy as np
from skimage.feature import greycomatrix
import cv2

# Carrega a imagem
img = io.imread('/content/borboleta.jpg')

im = cv2.imread('borboleta.jpg')
im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
ngcm= greycomatrix(im, [1], [0], 256, symmetric=False, normed=True)

# Aplica a detecção de bordas Canny para segmentar as bordas
bordas = feature.canny(img)

# Mostra a imagem original e a imagem com as bordas segmentadas
io.imshow_collection([img, bordas])
io.show()

"""### Segmentação de imagens com opencv"""

import cv2
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

# Carrega a imagem
img = cv2.imread('borboleta.jpg')

# Converte a imagem para escala de cinza
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Aplica o método Canny de detecção de bordas
edges = cv2.Canny(gray, 100, 200)

# Mostra a imagem original e a imagem segmentada
cv2_imshow(img)
cv2_imshow(edges)

"""### Segmentação """

#Importe as bibliotecas necessárias:
import cv2
import numpy as np
from google.colab.patches import cv2_imshow # para exibir imagens no Colab

#Carregue a imagem que você deseja segmentar:
image = cv2.imread("borboleta.jpg")

#Converta a imagem para escala de cinza:
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#Aplique um filtro Gaussiano para suavizar a imagem e remover ruído:
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

#Aplique a técnica de segmentação de limiarização (thresholding) para separar objetos da imagem de fundo. Neste exemplo, usamos o método de Otsu para determinar o valor de limiar:
_, thresholded_image = cv2.threshold(blurred_image, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)

#Encontre os contornos dos objetos segmentados na imagem:
contours, _ = cv2.findContours(thresholded_image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

#Desenhe os contornos encontrados na imagem original:
cv2.drawContours(image, contours, -1, (0, 255, 0), 2)

#Exiba a imagem segmentada no Colab:
cv2_imshow(image)